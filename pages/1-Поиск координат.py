import numpy as np
import pandas as pd
import requests
import io
import os
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd
sns.set(style="whitegrid", palette="pastel", color_codes=True)
sns.mpl.rc("figure", figsize=(20,20))
from shapely import wkt
import streamlit as st
import streamlit as st
import pandas as pd 
import geopandas as gpd 
import matplotlib.pyplot as plt
from geopy.geocoders import Nominatim

st.set_page_config(
page_title="–ì–µ–æ–∫–æ–¥–µ—Ä –∞–¥—Ä–µ—Å–æ–≤",
page_icon="üîé",
layout="wide",
initial_sidebar_state="expanded",
)

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

st.title('üîé–ì–µ–æ–∫–æ–¥–µ—Ä –∞–¥—Ä–µ—Å–æ–≤üîé')
st.info('–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∏—Ö –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥', icon="‚ÑπÔ∏è")

def yandex_geocode(adress):
  url = 'https://geocode-maps.yandex.ru/1.x'
  params = {'geocode': adress, 
  'apikey': 'a1e72ca3-5b59-4034-8022-facc02acf203', 'format': 'json'}
  r = requests.get(url, params=params)
  results = r.json()
  #–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  try:
    pos = results['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
  except:
    pos = 'error'
  #–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  try:
    ya_adress = results['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty']['GeocoderMetaData']['text']
  except:
    ya_adress = 'error'
  return pd.Series([pos, ya_adress])

def convertAdressToGPD(cities, col):
  cities[['coorditate', 'ya_adress']] = cities.apply(lambda x: yandex_geocode(x[col]))
  print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞–π–¥–µ–Ω—ã')
  if len(cities.coorditate) > 0:
    return cities
  else:
    print('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –≥–µ–æ–∫–æ–¥–µ—Ä–∞')

def main():
  file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx")
  if file is not None:
    file.seek(0)
    df_address = pd.read_excel(file)
    st.write(df_address.head())
    st.write(df_address.shape)
    if st.checkbox("–ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É"):
      address_name = st.selectbox("–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–æ–º, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏", df_address.columns.tolist())
      # df_address = df.copy()
      df_address["geocode_col"] = df_address[address_name].astype(str)
      st.write(df_address["geocode_col"].head())
      if st.checkbox("–í—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å"):
        with st.spinner('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...'):
          lat = []
          long = []
          norm_add = []
          for i in df_address.index:
            try:
              resp = yandex_geocode(df_address['geocode_col'][i])
              lat.append(resp.iloc[0].split(' ')[1])
              long.append(resp.iloc[0].split(' ')[0])
              norm_add.append(resp.iloc[1])
            except:
              lat.append('')
              long.append('')
          df_address['–®–∏—Ä–æ—Ç–∞'] = lat
          df_address['–î–æ–ª–≥–æ—Ç–∞'] = long
          df_address['–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å'] = norm_add
          df_address.drop('geocode_col', axis=1, inplace=True)
        st.success('–ì–æ—Ç–æ–≤–æ!')
        st.write(df_address.head())
    elif st.checkbox("–ù–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"):
      geolocator = Nominatim(user_agent="geo_app")
      # df_address = df.copy()
      selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —à–∏—Ä–æ—Ç–æ–π", df_address.columns.tolist())
      df_address["latitude"] = df_address[selection]
      selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–æ–ª–≥–æ—Ç–æ–π", df_address.columns.tolist())
      df_address["longitude"] = df_address[selection]
      if st.checkbox("–í—ã–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"):
        with st.spinner('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫...'):
          adresses = []
          for lat,lon in zip(df_address['latitude'], df_address['longitude']):
              adresses.append(geolocator.reverse((lat,lon)).address)
          df_address['–ê–¥—Ä–µ—Å'] = adresses
          st.success('–ì–æ—Ç–æ–≤–æ!')
          st.write(df_address.head())

    
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
      df_address.to_excel(writer,index=False)
      writer.save()
      st.download_button(
      label="üì• –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏",
      data=buffer,
      file_name=f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã_'{os.path.splitext(file.name)[0]}'.xlsx",
      mime="application/vnd.ms-excel"
      )

if __name__ == "__main__":
  main()