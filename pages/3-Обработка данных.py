import os
import warnings
import datetime
import fiona
import io
import streamlit as st
import pandas as pd
from streamlit_folium import folium_static
import xlsxwriter
from scipy.spatial import distance
import geopy.distance
import time
from pandas.api.types import (
    is_categorical_dtype,
    is_datetime64_any_dtype,
    is_numeric_dtype,
    is_object_dtype,
)

st.set_page_config(
    page_title="üö©–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–πüö©",
    page_icon="üö´",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title('üö©–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Öüö©')
st.info('–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏', icon="‚ÑπÔ∏è")

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


def filter_df(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    # –ø–µ—Ä–µ–≤–æ–¥ –¥–∞—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
    for col in df.columns:
        if is_object_dtype(df[col]):
            try:
                df[col] = pd.to_datetime(df[col])
            except Exception:
                pass

        if is_datetime64_any_dtype(df[col]):
            df[col] = df[col].dt.tz_localize(None)

    modification_container = st.container()
    with modification_container:
        to_filter_columns = st.multiselect("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Ç–æ–ª–±—Ü–∞–º:", df.columns)
        for column in to_filter_columns:
            left, right = st.columns((1, 20))
            left.write("‚Ü≥")
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å <= 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ
            if is_categorical_dtype(df[column]) or df[column].nunique() <= 20:
                user_cat_input = right.multiselect(
                    f"–ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ ¬´{column}¬ª",
                    df[column].unique(),
                )
                df = df[df[column].isin(user_cat_input)]
            elif is_numeric_dtype(df[column]):
                _min = float(df[column].min())
                _max = float(df[column].max())
                step = (_max - _min) / 100
                user_num_input = right.slider(
                    f"–ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ ¬´{column}¬ª",
                    _min,
                    _max,
                    (_min, _max),
                    step=step,
                )
                df = df[df[column].between(*user_num_input)]
            elif is_datetime64_any_dtype(df[column]):
                user_date_input = right.date_input(
                    f"–ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ ¬´{column}¬ª",
                    value=(
                        df[column].min(),
                        df[column].max(),
                    ),
                )
                if len(user_date_input) == 2:
                    user_date_input = tuple(map(pd.to_datetime, user_date_input))
                    start_date, end_date = user_date_input
                    df = df.loc[df[column].between(start_date, end_date)]
            else:
                user_text_input = right.text_input(
                    f"–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ ¬´{column}¬ª",
                )
                if user_text_input:
                    df = df[df[column].str.lower().str.contains(user_text_input.lower())]
    return df

def closest_node(node, nodes):
    closest_index = distance.cdist([node], nodes).argmin()
    latitude = nodes[closest_index][0]
    longitude = nodes[closest_index][1]
    return df_true[(df_true['–®–∏—Ä–æ—Ç–∞'] == latitude) & (df_true['–î–æ–ª–≥–æ—Ç–∞'] == longitude)]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'].iloc[0], \
            geopy.distance.geodesic(node, nodes[closest_index]).km

uploaded_file = st.file_uploader(
        label='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏', 
        type=['xlsx'],accept_multiple_files=False,key="fileUploader")

if uploaded_file is not None:
    df=pd.read_excel(uploaded_file)
    selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —à–∏—Ä–æ—Ç–æ–π", df.columns.tolist())
    df["latitude"] = df[selection]
    selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–æ–ª–≥–æ—Ç–æ–π", df.columns.tolist())
    df["longitude"] = df[selection]
    
    if st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
        location_found_cnt = filter_df(df)
        location_found_cnt = location_found_cnt.drop(['–î–æ–ª–≥–æ—Ç–∞', '–®–∏—Ä–æ—Ç–∞', 'Unnamed:0', 'Unnamed:0.1'], axis=1, errors='ignore')
        st.write(len(location_found_cnt))
        st.write(location_found_cnt)
        st.success(
            f'–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã {len(location_found_cnt)} –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫'
        )
        df = location_found_cnt
    uploaded_file_vsp = st.file_uploader(
        label='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–æ –Ω–∏—Ö', 
        type=['xlsx'],accept_multiple_files=False,key="objectfile")
    if uploaded_file_vsp is not None:
        df_true=pd.read_excel(uploaded_file_vsp)
        st.table(df_true.head())
        selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —à–∏—Ä–æ—Ç–æ–π –æ–±—ä–µ–∫—Ç–∞", df_true.columns.tolist())
        df_true["–®–∏—Ä–æ—Ç–∞"] = df_true[selection]
        selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–æ–ª–≥–æ—Ç–æ–π –æ–±—ä–µ–∫—Ç–∞", df_true.columns.tolist())
        df_true["–î–æ–ª–≥–æ—Ç–∞"] = df_true[selection]
        
        selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞", df_true.columns.tolist())
        df_true["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"] = df_true[selection]
        
        if df["latitude"].dtype == 'float64' \
        and df["longitude"].dtype == 'float64' \
        and df_true["–®–∏—Ä–æ—Ç–∞"].dtype == 'float64' \
        and df_true["–î–æ–ª–≥–æ—Ç–∞"].dtype == 'float64' :
            near_add = []
            dist_list = []
            lat_vsp = []
            long_vsp = []
            latitude_df = []
            longitude_df = []
            names = []
            
            with st.spinner('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –Ω–∏—Ö...'):    
                for i in range(len(df)):
                    close_node = closest_node(df[['latitude', 'longitude']].values[i], \
                                        df_true[['–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞']].values)
                    near_add.append(close_node[0])
                    dist_list.append(close_node[1])
                    lat_vsp.append(df_true[df_true['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'] == close_node[0]]['–®–∏—Ä–æ—Ç–∞'].iloc[0])
                    long_vsp.append(df_true[df_true['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'] == close_node[0]]['–î–æ–ª–≥–æ—Ç–∞'].iloc[0])
                    
                df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞'] = near_add
                df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'] = dist_list
                df['–®–∏—Ä–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞'] = lat_vsp
                df['–î–æ–ª–≥–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞'] = long_vsp
                df = pd.merge(df, df_true, on='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞')

            if near_add is not None:
                st.info('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∑—É–Ω–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö', icon="‚ÑπÔ∏è")
                selected_dist_range = st.slider('–î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞ (–≤ –∫–º):',
                                                float(df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'].min()), 
                                                float(df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'].max()),
                                                (
                                                    df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'].min(), 
                                                    df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'].max())
                                                )

                location_found = df[(df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'] >= selected_dist_range[0]) \
                                        &(df['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞'] <= selected_dist_range[1])]
                st.success(
                        f'–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã {len(location_found)} –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫'
                    )
               
    if st.checkbox("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–≥—Ä—É–∑–∫–µ"):
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            
            location_found.to_excel(writer,index=False)
            writer.save()
            st.download_button(
                label="üì• –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É",
                data=buffer,
                file_name=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π_'{os.path.splitext(uploaded_file.name)[0]}'.xlsx",
                mime="application/vnd.ms-excel"
            )
    else:
        st.warning('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤')
else:
    st.warning('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX')