import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import time
import math
import io
import os
import xlsxwriter
import geopandas as gpd
import geopy
import osmnx as ox
import plotly.express as px
import plotly.graph_objects as go
from geopy.distance import geodesic as GD
import re
from streamlit_folium import st_folium
import numpy as np
from shapely.geometry import Point, LineString, Polygon
import matplotlib.pyplot as plt
import folium

st.set_page_config(page_title="–ò—â–µ–º –±–∞—Ä—ãüíÉ")
st.title('üåê–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–πüåê')
st.info('–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', icon="‚ÑπÔ∏è")

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

def flatten_list(_2d_list):
        flat_list = []
        for element in _2d_list:
                if type(element) is list:
                        for item in element:
                                flat_list.append(item)
                else:
                        flat_list.append(element)
        return flat_list

excel_file = st.file_uploader("Upload File", type=['xls','xlsx'])
buffer = io.BytesIO()
if excel_file is not None:
        file_name = os.path.splitext(excel_file.name)[0]

def choose_object(df):
        st.header("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:")
        modification_container = st.container()
        df_select = pd.DataFrame()
        amenity = None
        
        with modification_container:
                category_options = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()
                to_filter_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:", category_options)
                select_changed = False
                
                if to_filter_columns:
                        select_changed = True
                        df_select = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(to_filter_columns)]    
                        types_options = df_select['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].unique()
                        amenity = st.multiselect("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:", 
                                                options=types_options.tolist(), 
                                                key='amenity')
                        st.write('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', amenity)
        
                        df_select = df[df['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].isin(amenity)]
                        
                if amenity and not select_changed:
                        amenity = st.multiselect("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:", 
                                                options=list(df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].isin(to_filter_columns)]['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].unique()), 
                                                default="all")
                        st.write(amenity)
                       
                        if "all" in amenity:
                                amenity = df[df['–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞'].isin(amenity)]["amenity"].unique()
                                df_select = df.query("amenity == @amenity")
                        df_select = df.query("amenity == @amenity")
                        st.write(df_select)
        return df_select

if excel_file is not None:
        df = pd.read_excel(excel_file)
        st.write(df.head())
        selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —à–∏—Ä–æ—Ç–æ–π", df.columns.tolist())
        df["Lat"] = df[selection]
        selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–æ–ª–≥–æ—Ç–æ–π", df.columns.tolist())
        df["Long"] = df[selection]
        number = st.number_input('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (–≤ –º–µ—Ç—Ä–∞—Ö)')
        
        if df["Lat"].dtype == 'float64' and df["Long"].dtype == 'float64' and number > 0:
                df_amn = pd.read_excel('data/amenity.xlsx')
                df_select = choose_object(df_amn)
                if len(df_select) > 0:
                        gdf_list = []
                        last_lats, last_longs = [], []
                        tags = {'amenity': df_select['amenity'].values.tolist()}
                        if st.checkbox("–í—ã–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"):
                                with st.spinner('–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫...'):    
                                        for i in df.index:
                                                try:
                                                        point = (df["Lat"][i], df["Long"][i])
                                                        gdf = ox.geometries.geometries_from_point(point, tags, dist=number).reset_index()
                                                        gdf = gdf.loc[:, gdf.isin([' ','NULL',0]).mean() <= .5]
                                                        gdf['Lat'] = df["Lat"][i]
                                                        gdf['Long'] = df["Long"][i]
                                                        gdf_list.append(gdf)
                                                except:
                                                        pass
                                st.success('–ì–æ—Ç–æ–≤–æ!') 
                                try:
                                        gdf_all = pd.concat(gdf_list)
                                        gdf_all[['–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏','–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']] = gdf_all['geometry'].reset_index().get_coordinates().reset_index().drop_duplicates('index', keep='first').drop(columns='index').values
                                        gdf_all['Lat'] = gdf_all['Lat'].astype(float)
                                        gdf_all['Long'] = gdf_all['Long'].astype(float)
                                        df['Lat'] = df['Lat'].astype(float)
                                        df['Long'] = df['Long'].astype(float)
                                        gdf_all = gdf_all.drop(columns='geometry')
                                        gdf_all = pd.merge(df, gdf_all, on = ['Lat', 'Long'])
                                        gdf_all = gdf_all[gdf_all['–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'].notna()]
                                        
                                        distances = []
                                        for i in gdf_all.index:
                                                dist = GD((gdf_all['Lat'][i], gdf_all['Long'][i]), 
                                                                                        (gdf_all['–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'][i], gdf_all['–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'][i])).meters
                                                distances.append(dist)
                                        gdf_all['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–æ–º –∏ –∏—Å–∫–æ–º–æ–π —Ç–æ—á–∫–æ–π (–≤ –º–µ—Ç—Ä–∞—Ö)'] = distances
                                        
                                        st.write(gdf_all)
                                        
                                        try:
                                                point = (float(gdf_all["–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"][0]), float(gdf_all["–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"][0]))
                                                map = folium.Map(location = [float(gdf_all["–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"].mean()), float(gdf_all["–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"].mean())], 
                                                                zoom_start=13,
                                                                tiles = 'cartodbpositron',)
                                                for lat, lon in zip(gdf_all['–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'], gdf_all['–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']):
                                                        folium.Circle(location = [lat, lon], 
                                                                radius = number, 
                                                                color = 'cadetblue', 
                                                                fill=True, 
                                                                weight = 0.5).add_to(map)
                                                for lat, lon, name in zip(gdf_all['–®–∏—Ä–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'], gdf_all['–î–æ–ª–≥–æ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'], gdf_all['name']):
                                                        folium.CircleMarker(location = [lat, lon], 
                                                                        tooltip = name,
                                                                        radius = 3,                                                     
                                                                        color = 'cadetblue', 
                                                                        fill_opacity=1).add_to(map)
                                                for lat, lon in zip(gdf_all['Lat'], gdf_all['Long']):
                                                        folium.CircleMarker(location = [lat, lon], 
                                                                        radius = 3,
                                                                        color = 'gray', 
                                                                        fill_opacity=1).add_to(map)
                                                m = st_folium(map)

                                                # –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è html'–∫–∏ –∫–∞—Ä—Ç—ã
                                                if st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"):
                                                        MAP_FILE = 'map.html'
                                                        map.save(MAP_FILE)
                                                        
                                                        with open(MAP_FILE, "rb") as file:
                                                                btn = st.download_button(
                                                                label="–°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML",
                                                                data=file,
                                                                file_name=MAP_FILE,
                                                                mime='text/html'
                                                        )
                                        except:
                                                print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç—É')
                                        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                                                gdf_all.to_excel(writer, sheet_name='Sheet1', index=False)
                                                writer.close()
                                                download2 = st.download_button(
                                                label="üì• –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏",
                                                data=buffer,
                                                file_name=f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏_'{file_name}'.xlsx",
                                                mime='application/vnd.ms-excel'
                                                )
                                except:
                                        st.warning('–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Å–∏–∫–∞')
     
else:
        st.warning('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ñ–∞–π–ª')